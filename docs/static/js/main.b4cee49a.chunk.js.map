{"version":3,"sources":["customHooks/useStyles.js","customHooks/useValidation.js","base.js","redux/actions/index.js","redux/constants.js","Components/GamePanel/User/User.js","Components/GamePanel/GameInfo/GeneralInfo/GeneralInfo.js","Components/GamePanel/GameInfo/BestGame/BestGame.js","Components/GamePanel/GameInfo/Leaderboard/Leaderboard.js","Components/GamePanel/GameInfo/GameInfo.js","Components/GamePanel/GamePanel.js","Components/GamePanel/GameControl/GameControl.js","customHooks/usePuzzle.js","Components/GameTable/GameTable.js","Components/Notifications/Notifications.js","Components/Page/Page.js","Components/Backdrop/Backdrop.js","App.js","serviceWorker.js","redux/reducers/User/Data/index.js","redux/reducers/User/Stat/BestGame/index.js","redux/reducers/User/Stat/CurrentGame/index.js","redux/reducers/User/Stat/GeneralInfo/index.js","redux/reducers/User/Stat/index.js","redux/reducers/User/Validation/index.js","redux/reducers/User/index.js","redux/reducers/Leaderboard/index.js","redux/reducers/Notification/index.js","redux/reducers/Loading/Backdrop/index.js","redux/reducers/Loading/Skeleton/index.js","redux/reducers/Loading/index.js","redux/initialState.js","redux/reducers/index.js","index.js"],"names":["useStyles","makeStyles","theme","container","minHeight","gameTableWr","width","padding","spacing","gameTable","border","borderRadius","overflow","position","zIndex","puzzles","fontSize","background","cursor","userSelect","opacity","height100","height","cardContentUser","maxWidth","margin","root","flexGrow","control","backdrop","drawer","color","userTabs","boxShadow","leaderboard","borderBottom","checkEmail","email","returnValue","validator","isEmail","error","text","checkName","name","length","checkPassword","password","useValidation","app","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","enqueueSnackbar","notification","key","options","type","Date","getTime","Math","random","closeSnackbar","dismissAll","removeSnackbar","userSignUp","userEmail","userName","userPass","dispatch","getState","a","setBackdrop","auth","createUserWithEmailAndPassword","then","data","currentUser","updateProfile","displayName","database","ref","user","uid","set","generalInfo","countOfGames","countOfSteps","spentTime","bestGame","date","message","uuidv4","variant","anchorOrigin","vertical","horizontal","catch","e","persist","action","Button","style","borderColor","onClick","token","setUserData","userSignIn","signInWithEmailAndPassword","userSignOut","signOut","clearStore","userValidation","errors","payload","setSkeleton","setStartGame","time","startTime","endTime","isWin","setEndGame","currentGame","stat","newGameKey","child","push","today","writeGame","String","getDate","padStart","getMonth","getFullYear","updates","update","console","log","setCountOfSteps","setIsWin","setBestGame","setGeneralInfo","info","setLeaderboard","leader","createData","obj","connect","store","loadingInterface","loading","skeleton","CState","ACTIONS","userValidate","classes","useState","setuserEmail","setUserName","setUserPass","validation","dataTextFields","id","label","onChange","target","value","trim","fullWidth","helperText","Grid","className","authorization","alignItems","direction","Skeleton","animation","Box","my","Typography","align","map","el","TextField","display","flexDirection","mt","currentError","Object","values","filter","rusText","timeFormat","timePatternString","timeFormatString","forEach","ch","trunc","toString","ceil","List","ListItem","ListItemText","primary","secondary","toFixed","Row","props","row","React","open","setOpen","Fragment","TableRow","TableCell","IconButton","aria-label","size","component","scope","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","m","mb","Table","TableHead","TableBody","TableContainer","Paper","TabPanel","children","index","other","role","hidden","aria-labelledby","a11yProps","useTheme","setValue","justifyContent","AppBar","Tabs","event","newValue","indicatorColor","textColor","scrollButtons","Tab","axis","onChangeIndex","dir","Leaderboard","Card","CardContent","py","ownProps","setSort","disabled","now","defaultBounds","top","left","bottom","right","setBounds","newGameTable","indexOfUndifined","indexOf","find","undefined","bounds","newDirection","createNewSort","arrLength","newGameSort","Array","keys","i","randomNumber","floor","tmp","checkSolveble","currentArray","strOfUndefined","sqrt","countOfInversions","j","usePuzzle","useDispatch","useSelector","x","y","setPuzzles","useCallback","oldPuzzles","newSortPuzzles","setNewSort","newPuzzles","sort","b","useEffect","rightPuzzles","checkIsWin","old","undefinedElement","steps","setPuzzlesSize","setStep","useRef","current","offsetWidth","Fade","cardContent","onStop","ui","abs","handleDrag","clsx","notifications","mykey","useSnackbar","displayedNotification","setDisplayedNotification","dismissed","includes","onClose","reason","onclose","onExited","oldValue","Container","fixed","justify","item","xs","gutterBottom","Backdrop","CircularProgress","watchUserBestGame","watchBestGame","watchGeneralInfo","onAuthStateChanged","xa","on","snapshot","val","orderByChild","limitToFirst","sortLeaderBoard","off","maxSnack","Boolean","window","location","hostname","match","state","combineReducers","GameReducer","BackdropReducer","SkeletonReducer","initialState","appReducer","rootReducer","middleware","applyMiddleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4cee49a.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        minHeight: '100vh'\n    },\n    gameTableWr: {\n        width: '100%',\n        padding: `${theme.spacing(3)}px !important`,\n    },\n    gameTable: {\n        border: '1px solid #aaa',\n        borderRadius: 16,\n        overflow: 'hidden',\n        padding: theme.spacing(1.5),\n        position: 'relative',\n        zIndex: 100,\n    },\n    puzzles: {\n        border: '1px solid #aaa',\n        overflow: 'hidden',\n        borderRadius: 8,\n        fontSize: '1.5rem',\n        background: 'transparent',\n        cursor: 'pointer',\n        userSelect: 'none',\n         zIndex: 20,\n        '&.red': {\n            background: 'rgba(255,0,0,.5)',\n            zIndex: 10,\n            opacity: 0\n        },\n        '&.green': {\n            background: 'rgba(0,255,0,.5)',\n        }\n    },\n    height100: {\n        height: '100%'\n    },\n    cardContentUser: {\n        maxWidth: 290,\n        margin: '0 auto',\n        position: 'relative',\n    },\n    root: {\n        flexGrow: 1,\n        minHeight: '100vh',\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1 + '!important',\n        color: '#fff',\n    },\n    userTabs: {\n        background: 'unset !important',\n        boxShadow: 'none !important'\n    }, \n    leaderboard: {\n        '& > *': {\n            borderBottom: 'unset !important',\n        },\n    }\n}));\n\nexport default useStyles","import validator from 'validator';\n\nconst checkEmail = email => {\n    let returnValue = {}\n\n    switch (validator.isEmail(email)) {\n        case true:\n            returnValue = {\n                error: false,\n                text: ''\n            }\n            break;\n        case false: \n            returnValue = {\n                error: true,\n                text: 'Неверный формат E-mail'\n            }\n            break;\n        default:\n            break\n    }\n\n\n    return returnValue\n}\n\nconst checkName = name => {\n    let returnValue = {}\n\n    switch (name.length >= 3) {\n        case true:\n            returnValue = {\n                error: false,\n                text: ''\n            }\n            break;\n        case false: \n            returnValue = {\n                error: true,\n                text: 'Слишком короткое имя пользователя'\n            }\n            break;\n        default:\n            break\n    }\n\n    return returnValue\n} \n\nconst checkPassword = password => {\n    let returnValue = {}\n\n    switch (password.length >= 6 && password.length <= 20) {\n        case true:\n            returnValue = {\n                error: false,\n                text: ''\n            }\n            break;\n        case false: \n            returnValue = {\n                error: true,\n                text: 'Пароль должен содержать от 6 до 12 символов'\n            }\n            break;\n        default:\n            break\n    }\n\n    return returnValue\n}\n\n\nconst useValidation = ( email, name, password ) => {\n\n    return {\n        email: {\n            ...checkEmail(email)\n        },\n        name: {\n            ...checkName(name)\n        },\n        password: {\n            ...checkPassword(password)\n        }\n    }\n}\n\nexport default useValidation","import * as firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\n\nconst app = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_APIKEY,\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASEURL,\n    projectId: process.env.REACT_APP_PROJECTID,\n    storageBucket: process.env.REACT_APP_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\n    appId: process.env.REACT_APP_APPID\n})\n\nexport default app","import React from 'react'\nimport * as CONSTANTS from '../constants'\nimport firebase from '../../base.js'\nimport { v4 as uuidv4 } from 'uuid';\nimport { Button } from '@material-ui/core/'\n\n\n// NOTIFICATION\nexport const enqueueSnackbar = (notification) => {\n    const key = notification.options && notification.options.key;\n\n    return {\n        type: CONSTANTS.ENQUEUE_SNACKBAR,\n        notification: {\n            ...notification,\n            key: key || new Date().getTime() + Math.random(),\n        },\n    };\n};\n\nexport const closeSnackbar = key => ({\n    type: CONSTANTS.CLOSE_SNACKBAR,\n        dismissAll: !key, // dismiss all if no key has been defined\n        key,\n});\n\nexport const removeSnackbar = key => ({\n    type: CONSTANTS.REMOVE_SNACKBAR,\n    key,\n});\n\n\n// USER\n\nexport const userSignUp = (userEmail = '', userName = '', userPass = '') => async (dispatch, getState) => {\n        dispatch(setBackdrop(true))\n        await firebase.auth().createUserWithEmailAndPassword(userEmail, userPass)\n            .then( data => {\n                firebase.auth().currentUser.updateProfile({\n                    displayName: userName,  \n                })\n\n                firebase.database().ref('users/' + data.user.uid).set({\n                    generalInfo: {\n                        countOfGames: 0,\n                        countOfSteps: 0,\n                        spentTime: 0,\n                    },\n                    bestGame: {\n                        date: 0,\n                        spentTime: 0,\n                        countOfSteps: 0,\n                    },\n                });\n            })\n            .then( function() { \n\n                dispatch(enqueueSnackbar({\n                    message: `${userName}, Вы успешно зарегистрированы!`,\n                    options: {\n                        key: uuidv4(),\n                        variant: 'success',\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                        },\n                    }\n                })) \n            })\n            .catch( e => {\n                dispatch(enqueueSnackbar({\n                    message: e.message,\n                    options: {\n                        key: uuidv4(),\n                        persist: true,\n                        variant: 'error',\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                        },\n                        action: key => (\n                            <Button variant=\"outlined\" style={{color: 'white', borderColor: 'white'}} onClick={() => dispatch(closeSnackbar(key))}>\n                               Закрыть \n                            </Button>\n                        ),\n                    }\n                }))\n            })\n        const { user: { data: { token, uid } } } = getState()\n        dispatch( setUserData(userName, token, uid) )\n        dispatch(setBackdrop(false))\n    }\n\n\nexport const userSignIn = (userEmail = '', userName = '', userPass = '') => async dispatch => {\n    dispatch(setBackdrop(true))\n    await firebase.auth().signInWithEmailAndPassword(userEmail, userPass)\n        .catch( e => {\n        dispatch(enqueueSnackbar({\n            message: e.message,\n            options: {\n                key: uuidv4(),\n                persist: true,\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                action: key => (\n                    <Button variant=\"outlined\" style={{color: 'white', borderColor: 'white'}} onClick={() => dispatch(closeSnackbar(key))}>\n                       Закрыть \n                    </Button>\n                ),\n            }\n        }))\n    })\n    dispatch(setBackdrop(false))\n}\n\nexport const userSignOut = () => async (dispatch, getState) => {\n    let { user: { data: {name} } } = getState();\n    firebase.auth().signOut().then(function() {\n        dispatch(enqueueSnackbar({\n            message: `${name}, Вы успешно вышли из аккаунта!`,\n            options: {\n                key: uuidv4(),\n                variant: 'success',\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n            }\n        })) \n        dispatch(clearStore())\n    }).catch(function(error) {\n        \n    });\n}\n\nexport const clearStore = () => ({\n    type: CONSTANTS.USER_SIGN_OUT\n})\n\n\nexport const userValidation = (errors) => ({\n        type: CONSTANTS.SET_USER_VALIDATION,\n        payload: errors\n})\n\nexport const setUserData = (name, token, uid) => dispatch => {\n    dispatch({\n        type: CONSTANTS.SET_USER_DATA,\n        payload: {\n            name, \n            token,\n            uid\n        }\n    })\n    dispatch(setBackdrop(false))\n    dispatch(setSkeleton(false))\n}\n\nexport const setStartGame = time => ({\n    type: CONSTANTS.SET_START_GAME,\n    payload: {\n        startTime: time,\n        endTime: 0,\n        isWin: false,\n        countOfSteps: 0,\n    }\n})\n\nexport const setEndGame = time => async ( dispatch, getState) => {\n    dispatch( {\n        type: CONSTANTS.SET_START_GAME,\n        payload: {\n            endTime: time\n        }\n    })\n\n    let {   user: { stat: { currentGame } }, \n            user: { data }, \n            user: { stat: { bestGame } },\n            user: { stat: { generalInfo } } } = getState()\n\n    // Get a key for a new Post.\n    if ( data.token ) {\n        try {\n            let newGameKey = firebase.database().ref('users/' + data.uid).child('games').push().key;\n            // Write the new post's data simultaneously in the posts list and the user's post list.\n            let today = new Date()\n            let writeGame = {\n                date: `${String(today.getDate()).padStart(2, '0')}.${String(today.getMonth() + 1).padStart(2, '0')}.${today.getFullYear()}`,\n                countOfSteps: currentGame.countOfSteps,\n                spentTime: (currentGame.endTime - currentGame.startTime) / 1000\n            }\n\n            generalInfo.countOfSteps += writeGame.countOfSteps\n            generalInfo.spentTime += writeGame.spentTime\n            generalInfo.countOfGames++\n\n\n\n            let updates = {};\n            updates['games/' + newGameKey] = { ...writeGame, user: data.name};\n            updates['users/' + data.uid + '/games/' + newGameKey] = writeGame;\n            updates['users/' + data.uid + '/generalInfo'] = generalInfo;\n            if ( !bestGame.spentTime || bestGame.spentTime > writeGame.spentTime ) {\n                updates['users/' + data.uid + '/bestGame/'] = writeGame;\n            }\n\n\n            firebase.database().ref().update(updates).catch( e => {\n                dispatch(enqueueSnackbar({\n                message: 'При попытке записи результата произошла ошибка: ' + e.message,\n                options: {\n                    key: uuidv4(),\n                    persist: true,\n                    variant: 'error',\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    action: key => (\n                        <Button variant=\"outlined\" style={{color: 'white', borderColor: 'white'}} onClick={() => dispatch(closeSnackbar(key))}>\n                           Закрыть \n                        </Button>\n                    ),\n                }\n                }))\n            });\n\n        } catch(e) {\n            // statements\n            console.log(e);\n        }\n    }\n}\n\nexport const setCountOfSteps = countOfSteps => ({\n    type: CONSTANTS.SET_COUNT_OF_STEPS,\n    payload: {\n        countOfSteps\n    }\n})\n\nexport const setIsWin = isWin => ({\n    type: CONSTANTS.SET_ISWIN,\n    payload: {\n        isWin\n    }\n})\n\nexport const setBestGame = bestGame => ({\n    type: CONSTANTS.SET_BEST_GAME,\n    payload: {\n        ...bestGame\n    }\n})\n\nexport const setGeneralInfo = info => ({\n    type: CONSTANTS.SET_GENERAL_INFO,\n    payload: info\n})\n\n\n// LOADING\n\nexport const setBackdrop = ( type ) => ({\n    type: CONSTANTS.SET_BACKDROP,\n    payload: type\n})\n\nexport const setSkeleton = ( type ) => ({\n    type: CONSTANTS.SET_SKELETON,\n    payload: type\n})\n\n\n// LEADERBOARD \n\nexport const setLeaderboard = leader => ({\n    type: CONSTANTS.SET_LEADER_BOARD,\n    payload: leader\n})\n\n","// NOTIFICATIONS \n\nexport const ENQUEUE_SNACKBAR = 'ENQUEUE_SNACKBAR'\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR'\nexport const REMOVE_SNACKBAR = 'REMOVE_SNACKBAR'\n\n\n// USER\n\nexport const USER_SIGN_UP = 'USER_SIGN_UP'\nexport const USER_SIGN_IN = 'USER_SIGN_IN'\nexport const USER_SIGN_OUT = 'USER_SIGN_OUT'\nexport const SET_USER_AUTH = 'SET_USER_AUTH'\nexport const SET_GENERAL_INFO = 'SET_GENERAL_INFO'\nexport const SET_USER_VALIDATION = 'SET_USER_VALIDATION'\nexport const SET_USER_DATA = 'SET_USER_DATA'\n\n\n// GAME\n\nexport const SET_START_GAME = 'SET_START_GAME'\nexport const SET_END_GAME = 'SET_END_GAME'\nexport const SET_COUNT_OF_STEPS = 'SET_COUNT_OF_STEPS'\nexport const SET_ISWIN = 'SET_ISWIN'\nexport const SET_BEST_GAME = 'SET_BEST_GAME'\n\n\n// LOADING\n\nexport const SET_BACKDROP = 'SET_BACKDROP'\nexport const SET_SKELETON = 'SET_SKELETON'\n\n\n// LeaderBoard \n\nexport const SET_LEADER_BOARD = 'SET_LEADER_BOARD'\n","import React, {useState} from 'react'\nimport useStyles from '../../../customHooks/useStyles'\nimport useValidation from '../../../customHooks/useValidation'\nimport { connect } from 'react-redux'\nimport { \n    Grid,\n    Typography,\n    Box,\n    Button,\n    TextField,\n    } from '@material-ui/core'\nimport * as ACTIONS from '../../../redux/actions/'\nimport { Skeleton } from '@material-ui/lab';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined'\n\nconst createData = ( obj ) => {\n    return {...obj}\n}\n\nconst User = ({user, CState, loadingInterface}) => {\n    \n    const classes = useStyles();\n    const [ userEmail, setuserEmail ] = useState('')\n    const [ userName, setUserName ] = useState('')\n    const [ userPass, setUserPass ] = useState('')\n    const validation = useValidation;\n\n    const dataTextFields = [\n        createData(\n                {   \n                    error: user.validation.email.error,\n                    id: \"userEmail\",\n                    label: \"E-mail\",\n                    type: \"email\",\n                    onChange: e => setuserEmail( e.target.value.trim() ),\n                    fullWidth: true,\n                    helperText: user.validation.email.error ? user.validation.email.text : '' \n                }\n                ),\n        createData(\n                {   \n                    error: user.validation.name.error,\n                    id: \"userName\",\n                    label: \"Имя\",\n                    onChange: e => setUserName( e.target.value.trim() ),\n                    fullWidth: true,\n                    helperText: user.validation.name.error ? user.validation.name.text : ''\n                }\n                ),\n        createData(\n                {   \n                    error: user.validation.password.error,\n                    id: \"userPass\",\n                    label: \"Пароль\",\n                    type: \"password\",\n                    onChange: e => setUserPass( e.target.value.trim() ),\n                    fullWidth: true,\n                    helperText: user.validation.password.error ? user.validation.password.text : ''\n                }\n                ),\n    ]\n\n    const userSignIn = () => {\n        let currentError = validation( userEmail, 'userName', userPass )\n        if (Object.values(currentError).filter( el => el.error === true ).length === 0) {\n            CState.userSignIn( userEmail, userName, userPass )\n        }\n        CState.userValidate(currentError)\n    }\n\n    const userSignUp = () => {\n        let currentError = validation( userEmail, userName, userPass )\n        if (Object.values(currentError).filter( el => el.error === true ).length === 0) {\n            CState.userSignUp( userEmail, userName, userPass )\n        } \n\n        CState.userValidate(currentError)\n    }\n\n    return (\n        <Grid className={classes.authorization} alignItems=\"center\" container direction=\"column\">\n            { loadingInterface ? <Skeleton animation=\"wave\" variant=\"circle\" width={30} height={30} /> : <AccountCircleOutlinedIcon fontSize=\"large\" /> }\n            \n            <Box width={1} my={3}>\n                { \n                    loadingInterface ? <Skeleton animation=\"wave\" height={14} width=\"50%\" style={{ margin: '0 auto' }} /> : <Typography align=\"center\" >Здравствуйте</Typography>\n                }\n            </Box>\n\n            { dataTextFields.map( el => (\n                <Box key={el.id} width={1} my={1}>\n                    { loadingInterface ? \n                        <Skeleton variant=\"rect\" animation=\"wave\" height={50} width=\"100%\" />\n                    :\n                        <TextField\n                            {...el}\n                        />\n                    }\n                </Box>\n            ))}\n\n            <Box display=\"flex\" flexDirection=\"column\" width={1} my={1} mt={3} >\n            {\n                loadingInterface ?\n                    <Skeleton variant=\"rect\" animation=\"wave\" height={35} width=\"100%\" />\n                :\n                    <Button onClick={ userSignIn } variant=\"outlined\" color=\"secondary\">\n                        Вход\n                    </Button>\n            }\n            </Box>\n\n            <Box display=\"flex\" flexDirection=\"column\" width={1} my={1}>\n            {\n                loadingInterface ?\n                    <Skeleton variant=\"rect\" animation=\"wave\" height={35} width=\"100%\" />\n                :\n                    <Button onClick={ userSignUp } variant=\"outlined\" color=\"secondary\">\n                        Регистрация\n                    </Button>\n            }\n            </Box>\n\n        </Grid>\n    )\n}\n\nconst mapStateToProps = store => ({\n    user: store.user,\n    loadingInterface: store.loading.skeleton\n})\n\nconst mapDispatchToProps = dispatch => ({\n    CState: {\n        userSignUp: (userEmail, userName, userPass) => dispatch( ACTIONS.userSignUp(userEmail, userName, userPass) ),\n        userSignIn: (userEmail, userName, userPass) => dispatch( ACTIONS.userSignIn(userEmail, userName, userPass) ),\n        userValidate: (errors) => dispatch( ACTIONS.userValidation(errors) )\n        \n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User)","import React from 'react'\nimport { connect } from 'react-redux'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst createData = ( rusText, value ) => {\n    return {\n        rusText,\n        value\n    }\n}\n\nconst timeFormat = time => {\n    const timePatternString = [...'Hh Mm Ss']\n    let timeFormatString = ''\n\n    timePatternString.forEach( ch => {\n        switch (ch) {\n            case 'H':\n                timeFormatString += Math.trunc( time / 3600 ).toString()\n                break;\n            case 'M':\n                timeFormatString += Math.trunc( time / 60 ).toString()\n                break;\n            case 'S':\n                timeFormatString += Math.ceil( time % 60 ).toString()\n                break\n            default:\n                timeFormatString += ch\n                break;\n        }\n    })\n    return timeFormatString\n}\n\nconst GeneralInfo = ( {generalInfo} ) => {\n\n    const data = [\n        createData( 'Количество завершенных игр:',  generalInfo.countOfGames),\n        createData( 'Количество передвинутых плашек:',  generalInfo.countOfSteps),\n        createData( 'Время в игре:',  timeFormat(generalInfo.spentTime))\n    ]\n\n    return (\n        <List>\n            { data.map( el => (\n                <ListItem key={uuidv4()}>\n                    <ListItemText primary={el.rusText} secondary={el.value} />\n                </ListItem> \n            )) }\n        </List>\n      );\n}\n\n\nconst mapStateToProps = store => ({\n    generalInfo: store.user.stat.generalInfo\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralInfo)","import React from 'react'\nimport { connect } from 'react-redux'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst timeFormat = time => {\n    const timePatternString = [...'Mm Ss']\n    let timeFormatString = ''\n\n    timePatternString.forEach( ch => {\n        switch (ch) {\n            case 'M':\n                timeFormatString += Math.trunc( time / 60 ).toString()\n                break;\n            case 'S':\n                timeFormatString += ( time % 60 ).toFixed(2)\n                break\n            default:\n                timeFormatString += ch\n                break;\n        }\n    })\n    return timeFormatString\n}\n\nconst createData = ( rusText, value ) => {\n    return {\n        rusText,\n        value\n    }\n}\n\nconst BestGame = ( { bestGame } ) => {\n    const data = [\n        createData( 'Затраченное время:',  timeFormat(bestGame.spentTime)),\n        createData( 'Количество передвинутых плашек:',  bestGame.countOfSteps),\n        createData( 'Дата:',  bestGame.date)\n    ]\n\n    return (\n        <List>\n            { data.map( el => (\n                <ListItem key={uuidv4()}>\n                    <ListItemText primary={el.rusText} secondary={el.value} />\n                </ListItem> \n            )) }\n        </List>\n      );\n}\n\nconst mapStateToProps = store => ({\n    bestGame: store.user.stat.bestGame\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BestGame)","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport useStyles from '../../../../customHooks/useStyles'\nimport { connect } from 'react-redux'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction Row(props) {\n  const { row, position } = props;\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const timeFormat = time => {\n    const timePatternString = [...'Mm Ss']\n    let timeFormatString = ''\n\n    timePatternString.forEach( ch => {\n        switch (ch) {\n            case 'M':\n                timeFormatString += Math.trunc( time / 60 ).toString()\n                break;\n            case 'S':\n                timeFormatString += ( time % 60 ).toFixed(2)\n                break\n            default:\n                timeFormatString += ch\n                break;\n        }\n    })\n    return timeFormatString\n}\n\n  return (\n    <React.Fragment>\n      <TableRow className={classes.leaderboard}>\n        <TableCell style={{padding: 0}}>\n          <IconButton  aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {`${position}. ${row.user}`}\n        </TableCell>\n        <TableCell align=\"right\">\n            { timeFormat(row.spentTime) }\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box m={1} mb={4} >\n              \n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Дата</TableCell>\n                    <TableCell>Шагов</TableCell>\n                    \n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                    <TableRow>\n                        <TableCell component=\"th\" scope=\"row\">\n                            {row.date}\n                        </TableCell>\n                        <TableCell component=\"th\" scope=\"row\">\n                            {row.countOfSteps}\n                        </TableCell>\n                    </TableRow>\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nconst CollapsibleTable = ({leaderboard}) => {\n\n    return (\n        <TableContainer component={Paper}>\n            <Table size=\"small\" aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell />\n                        <TableCell>Имя</TableCell>\n                        <TableCell>Время</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {leaderboard.map((row, id) => (\n                        <Row key={uuidv4()} position={id + 1} row={row} />\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nconst mapStateToProps = store => ({\n    leaderboard: store.leaderboard\n})\n\nexport default connect(mapStateToProps, null)(CollapsibleTable)\n","import React from 'react';\nimport SwipeableViews from 'react-swipeable-views';\nimport { useTheme } from '@material-ui/core/styles';\nimport {\n    AppBar,\n    Tabs,\n    Tab,\n    Typography,\n    Box,\n    Grid,\n    Button\n} from '@material-ui/core/';\nimport useStyles from '../../../customHooks/useStyles'\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined'\nimport {connect} from 'react-redux'\nimport GeneralInfo from './GeneralInfo/GeneralInfo'\nimport BestGame from './BestGame/BestGame'\nimport Leaderboard from './Leaderboard/Leaderboard'\nimport * as ACTIONS from '../../../redux/actions/'\n\n\nfunction TabPanel(props) {\n    \n    const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\n\nfunction a11yProps(index) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`,\n  };\n}\n\n\nconst GameInfo = ( {user, CState} ) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleChangeIndex = (index) => {\n        setValue(index);\n    };\n\n    const userSignOut = () => {\n        CState.userSignOut()\n    }\n\n    return (\n        <div>\n            <Grid className={classes.authorization} alignItems=\"center\" container direction=\"column\">\n                <AccountCircleOutlinedIcon fontSize=\"large\" />\n                <Box width={1} my={2}>\n                    <Typography align=\"center\" >{user.name}</Typography>\n                    <Box width={1} display=\"flex\" justifyContent=\"center\" > <Button onClick={userSignOut} color=\"secondary\">Выход</Button> </Box>\n                </Box>\n            </Grid>\n\n            \n            <AppBar className={classes.userTabs} position=\"static\" color=\"default\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"auto\"\n                    aria-label=\"scrollable auto tabs example\"\n                >\n                    <Tab label=\"Общая статистика\" {...a11yProps(0)} />\n                    <Tab label=\"Лучший результат\" {...a11yProps(1)} />\n                    <Tab label=\"Таблица лидеров\" {...a11yProps(2)} />\n                </Tabs>\n            </AppBar>\n            <SwipeableViews\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                index={value}\n                onChangeIndex={handleChangeIndex}\n            >\n                <TabPanel value={value} index={0} dir={theme.direction}>\n                    <GeneralInfo />\n                </TabPanel>\n                <TabPanel value={value} index={1} dir={theme.direction}>\n                    <BestGame />\n                </TabPanel>\n                <TabPanel value={value} index={2} dir={theme.direction}>\n                    <Leaderboard />\n                </TabPanel>\n          </SwipeableViews>\n        </div>\n    );\n}\n\nconst mapStateToProps = store => ({\n    user: store.user.data\n})\n\nconst mapDispatchToProps = dispatch => ({\n    CState: {\n        userSignOut: () => dispatch( ACTIONS.userSignOut() )\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameInfo)","import React from 'react'\nimport { \n    Card,\n    Box,\n    CardContent,\n    } from '@material-ui/core'\n\nimport useStyles from '../../customHooks/useStyles'\nimport User from './User/User'\nimport { connect  } from 'react-redux'\nimport GmaeInfo from './GameInfo/GameInfo'\n\n\nconst GamePanel = ({ user }) => {\n\n    const classes = useStyles();\n    return (\n        <Card className={classes.height100} > \n            <CardContent className={classes.cardContentUser} >\n                <Box py={3}>\n                    { (user.token) ? <GmaeInfo />\n                        : <User />\n                    }\n                </Box>\n\n            </CardContent>\n        </Card>\n    )\n}\n\n\nconst mapStateToProps = store => ({\n    user: store.user.data\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePanel)\n","import React from 'react'\nimport { \n    Button,\n    } from '@material-ui/core'\nimport { Skeleton } from '@material-ui/lab';\nimport { connect } from 'react-redux'\nimport * as ACTIONS from '../../../redux/actions/'\n\nconst GameControl = ( {loadingInterface, currentGame, CState, setSort} ) => {    \n\n    const startNewGame = () => {\n        CState.setStartGame(Date.now())\n        setSort()\n    }\n\n    return (\n        <>\n            {\n                loadingInterface ?\n                    <Skeleton animation=\"wave\" variant=\"rect\" width=\"100%\" height={35} />\n                :\n                <Button disabled={ !!currentGame.startTime && !currentGame.endTime } size=\"large\" onClick={startNewGame} variant=\"contained\" color=\"primary\">\n                    Новая игра\n                </Button>\n            }\n            \n        </>\n    )\n}\n\n\n\nconst mapStateToProps = (store, ownProps) => ({\n    loadingInterface: store.loading.skeleton,\n    currentGame: store.user.stat.currentGame,\n    setSort: ownProps.setSort\n})\n\nconst mapDispatchToProps = dispatch => ({\n    CState: {\n        setStartGame: time => dispatch(ACTIONS.setStartGame(time)),\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameControl)\n\n","import { useState, useEffect, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch } from 'react-redux';\nimport * as ACTIONS from '../redux/actions/'\n\n\n// BOUNDS\n\nconst defaultBounds = {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n}\n\nconst newDirection = gameTable => {\n    const indexOfUndifined = gameTable.indexOf(gameTable.find( el => (el.id === undefined)));\n\n    return gameTable.map( ( el, id ) => {\n        el.bounds = {...defaultBounds}\n        if ( indexOfUndifined > id ) {\n            if ( (indexOfUndifined - id) === 1 && ![3,7,11].filter( el => el === id ).length ) {\n                el.bounds.right = (el.size + el.margin * 2); \n            } else if ( (indexOfUndifined - id) === 4 ) {\n                el.bounds.bottom = (el.size + el.margin * 2);  \n            } \n        } else {\n            if ( (id - indexOfUndifined ) === 1 && ![4,8,12].filter( el => el === id ).length ) {\n                el.bounds.left = - (el.size + el.margin * 2); \n            } else if ( (id - indexOfUndifined) === 4 ) {\n                el.bounds.top = - (el.size + el.margin * 2);  \n            } \n        }\n        return el\n    })\n    \n}    \n\nconst setBounds = ( gameTable ) => {\n    \n    let newGameTable = [...gameTable];\n    newGameTable = newDirection(newGameTable)\n    \n    return newGameTable\n}\n\n\n// NEW SORT\n\nconst createNewSort = (arrLength) => {\n    const newGameSort =  [...Array(arrLength-1).keys(), undefined];\n\n\n    for (let i = newGameSort.length; i > 1; i--) {\n        let randomNumber = Math.floor(Math.random() * i);\n        let tmp = newGameSort[i-1];\n        newGameSort[i-1] = newGameSort[randomNumber];\n        newGameSort[randomNumber] = tmp;\n    }\n\n    return newGameSort\n}\n\nconst checkSolveble = (currentArray) => {\n\n    const strOfUndefined = Math.sqrt( currentArray.length ) - ( Math.trunc( currentArray.indexOf(undefined) / Math.sqrt( currentArray.length ) ) )\n    let countOfInversions = 0\n    let isSolveble = false;\n\n    for (let i = 0; i < currentArray.length; i++) {\n        for (let j = i + 1; j < currentArray.length; j++) {\n            if (currentArray[i] !== undefined && currentArray[j] !== undefined && currentArray[i] > currentArray[j] ) {\n                countOfInversions++;\n            }\n        }\n    }\n\n    if ( Math.sqrt(currentArray.length) & 1 ) {\n        isSolveble = !(countOfInversions & 1);\n    } else {\n        isSolveble = !!(strOfUndefined & 1) ? !(countOfInversions & 1) : !!(countOfInversions & 1)  \n    }\n\n    return isSolveble\n}\n\n\nconst setNewSort = (arrLength) => {\n\n    let newGameSort = []\n\n    do {\n        newGameSort = createNewSort(arrLength)\n    } while (!checkSolveble(newGameSort));\n    \n    return newGameSort;\n}\n\n\n// Check Win Combination\n\nconst checkIsWin = (puzzles = []) => {\n    let isWin = false\n    let rightPuzzles = puzzles.filter( (el, id) => el.id === id ).length\n    isWin = ( rightPuzzles === 15) ? true : false; \n\n    return isWin\n}\n\n\nconst usePuzzle = () => {\n    const dispatch = useDispatch();\n    const currentGame = useSelector(store => store.user.stat.currentGame);\n    const [ puzzles, setPuzzles ] = useState([...Array(16).keys()].map((el,id) => {\n        return {\n            id: (id === 15) ? undefined : id ,\n            key: uuidv4(),\n            margin: 5,\n            size: 0,\n            x: 0,\n            y: 0,\n            bounds: defaultBounds\n        }\n    }\n    ));\n\n    const setPuzzlesSize = ( size ) => {\n        setPuzzles( oldPuzzles => {\n            return oldPuzzles.map( el => ({...el, size}) )\n        })\n    }\n\n    \n\n    const setSort = useCallback(() => {\n        setPuzzles( oldPuzzles => {\n            const newSortPuzzles = setNewSort(oldPuzzles.length)\n\n            let newPuzzles = [...oldPuzzles].sort( ( a, b ) => {\n                return newSortPuzzles.indexOf(a.id) - newSortPuzzles.indexOf(b.id)\n            } )\n\n            newPuzzles = setBounds(newPuzzles)\n\n            return newPuzzles\n        })\n    }, [puzzles.length]) \n\n    const setStep = ( id ) => {\n        setPuzzles( old => {\n\n                let newPuzzles = [...old];\n\n                const indexOfUndifined = puzzles.indexOf(puzzles.find((el) => (el.id === undefined)))\n                const undefinedElement = newPuzzles[indexOfUndifined]\n                newPuzzles[indexOfUndifined] = newPuzzles[id]\n                newPuzzles[id] = undefinedElement\n                newPuzzles = setBounds(newPuzzles)\n\n                \n                \n\n                return newPuzzles\n            } ) \n    }\n\n    useEffect( () => {  \n        checkIsWin(puzzles) && currentGame.startTime && dispatch( ACTIONS.setIsWin(true))\n    } , [puzzles, dispatch, currentGame.startTime])\n\n\n    return [ puzzles, setPuzzlesSize, setSort, setStep ]\n}\n\nexport default usePuzzle","import React, {useEffect, useRef} from 'react'\nimport useStyles from '../../customHooks/useStyles'\nimport { \n    Grid,\n    Card,\n    Box,\n    CardContent,\n    Fade\n    } from '@material-ui/core'\nimport Draggable from 'react-draggable';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux'\nimport * as ACTIONS from '../../redux/actions'\nimport clsx from 'clsx'\nimport GameControl from '../GamePanel/GameControl/GameControl'\nimport usePuzzle from '../../customHooks/usePuzzle'\n\n\n\nconst GameTable = ({currentGame, loadingInterface, CState}) => {\n\n    const classes = useStyles();\n    const [ puzzles, setPuzzlesSize, setSort, setStep ] = usePuzzle()\n    const gameTable = useRef(null);\n    \n    // Init puzzle size and set sort\n    useEffect( () => {\n\n        gameTable && setPuzzlesSize(gameTable.current.offsetWidth/4 - 17)\n\n    }, [gameTable])\n\n    // Actions if user win\n    useEffect( () => {\n\n        if ( currentGame.isWin ) {\n            console.log('You WIN. Count of steps: ' + currentGame.countOfSteps)\n            CState.setEndGame(Date.now())\n            CState.enqueueSnackbar({\n                message: 'Поздравляем! Вы выиграли!',\n                options: {\n                    key: uuidv4(),\n                    variant: 'success',\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                },\n            });\n        }\n    }, [currentGame.isWin] )\n\n    // Puzzle motion's handler\n    const handleDrag = (e, ui, el, id) => {\n\n\n        if ( (Math.abs(ui.x) > (el.margin + el.size) / 2) || \n             (Math.abs(ui.y) > (el.margin + el.size) / 2)  \n        ){\n            CState.setCountOfSteps(currentGame.countOfSteps + 1)\n            setStep(id)\n        }\n    };\n\n\n    return (\n       \n        <Card className={classes.gameTableWr} > \n             <Fade in={!loadingInterface} >\n            <CardContent className={classes.cardContent} >\n                \n\n\n                <Grid ref={gameTable} className={classes.gameTable} container > \n                    \n                    { \n                        puzzles.map( (el, id) => ( \n                            <Draggable\n                            disabled={ !currentGame.startTime || ( currentGame.startTime && currentGame.endTime ) }\n                            key={el.key}\n                            bounds={{\n                                ...el.bounds\n                            }}\n                            position={{\n                                x: el.x, \n                                y: el.y\n                            }}\n                            \n                            onStop={(e, ui) => { handleDrag(e, ui, el, id) }}\n                            ><Box \n                                className={clsx({\n                                    [classes.puzzles]: true,\n                                    'red': el.id === undefined,\n                                    'green': el.id === id\n                                    })}\n                                width={el.size}\n                                height={el.size}\n                                \n                                display=\"flex\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                m={`${el.margin}px`}\n                            >\n                            { `${(el.id + 1).toString()}`}\n                            </Box></Draggable>\n                        ))\n                    }\n                   \n                        \n\n                        \n                </Grid>\n                <Box width={1} display=\"flex\" justifyContent=\"center\" py={3}>\n                    <GameControl setSort={setSort} />\n                </Box>\n            </CardContent>\n            \n             </Fade>\n        </Card>\n        \n    )\n}\n\nconst mapStateToProps = (store) => ({\n    currentGame: store.user.stat.currentGame,\n    loadingInterface: store.loading.skeleton\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    CState: {\n        enqueueSnackbar: (...args) => dispatch(ACTIONS.enqueueSnackbar(...args)),\n        setEndGame: time => dispatch(ACTIONS.setEndGame(time)),\n        setCountOfSteps: steps => dispatch( ACTIONS.setCountOfSteps(steps) ),\n        setIsWin: isWin => dispatch( ACTIONS.setIsWin(isWin) )\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameTable)","import { useState, useEffect } from 'react'\n\nimport { connect } from 'react-redux';\nimport * as ACTIONS from '../../redux/actions'\n\nimport { useSnackbar } from 'notistack';\n\n\n\nconst Notifications = ( {notifications, CState }  ) => {\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const [displayedNotification, setDisplayedNotification] = useState([])\n\n\n    useEffect(() => {\n        \n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\n            if (dismissed) {\n                // dismiss snackbar using notistack\n                closeSnackbar(key);\n                return;\n            }\n\n            // do nothing if snackbar is already displayed\n            if (displayedNotification.includes(key)) return;\n\n            // display snackbar using notistack\n            enqueueSnackbar(message, {\n                key,\n                ...options,\n                onClose: (event, reason, mykey) => {\n                    if (options.onclose) {\n                        options.onclose(event, reason, mykey);\n                    }\n                },\n                onExited: (event, mykey) => {\n                    // removen this snackbar from redux store\n                    CState.removeSnackbar(mykey);\n                    setDisplayedNotification(oldValue => [...oldValue.filter(key => key !== mykey)]);\n                },\n            });\n\n            // keep track of snackbars that we've displayed\n            setDisplayedNotification(oldValue => [...oldValue, key]);\n        });\n    }, [notifications, closeSnackbar, enqueueSnackbar]);\n\n\n    return null\n}\n\nconst mapStateToProps = (store) => ({\n    notifications: store.notifications\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    CState: {\n        removeSnackbar: (mykey) => dispatch(ACTIONS.removeSnackbar(mykey))\n    }\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps )(Notifications)","import React from 'react'\nimport useStyles from '../../customHooks/useStyles'\nimport { \n    Container, \n    Grid,\n    Typography,\n    } from '@material-ui/core'\n\nimport GamePanel from '../GamePanel/GamePanel'\nimport GameTable from '../GameTable/GameTable'\nimport { connect } from 'react-redux'\nimport Notifications from '../Notifications/Notifications'\n\n\nconst Page = (  ) => {\n    const classes = useStyles()\n   \n    // console.log(puzzlesFix);\n    //console.log(puzzles);\n\n    return (\n        <Container fixed className={classes.container} maxWidth=\"md\">\n            <Grid container direction=\"column\" justify=\"center\" className={classes.root} spacing={2}>\n                \n                <Grid item container xs={12} >\n                    <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n                        Пятнашки\n                    </Typography>\n                </Grid>\n\n                <Grid item container xs={12} spacing={3} > \n                    <Grid item container xs={7} direction=\"row\" >\n                        <GameTable />\n                    </Grid>\n\n                    <Grid item container xs={5} direction=\"column\"  >\n                        <GamePanel /> \n                    </Grid>\n                </Grid>\n\n                <Notifications />\n\n            </Grid>\n        </Container>\n    )\n}\n\nconst mapStateToProps = (store) => ({\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page) ","import React from 'react'\nimport { connect } from 'react-redux'\nimport useStyles from '../../customHooks/useStyles'\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst BackdropComp = ( { backdrop } ) => {\n    const classes = useStyles();\n\n    return (\n        <Backdrop className={classes.backdrop} open={backdrop}>\n            <CircularProgress color=\"inherit\" />\n        </Backdrop>\n    )\n}\n\nconst mapStateToProps = store => ({\n    backdrop: store.loading.backdrop\n})\n\nexport default connect(mapStateToProps, null)(BackdropComp)","import React, { useEffect } from 'react'\nimport Page from './Components/Page/Page'\nimport { SnackbarProvider } from 'notistack'\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport firebase from './base.js'\nimport { connect } from 'react-redux'\nimport * as ACTIONS from './redux/actions/'\n\n\nfunction App( { CState } ) {\n\n\n    useEffect( () => {\n        let watchUserBestGame\n        let watchBestGame\n        let watchGeneralInfo\n\n        firebase.auth().onAuthStateChanged( user => {\n            if ( user ) {\n                CState.setUserData(user.displayName, user.xa, user.uid)\n\n                \n                // watch user Best Game\n                watchUserBestGame = firebase.database().ref('users/' + user.uid + '/bestGame/');\n                watchUserBestGame.on('value', function(snapshot) {\n                    CState.setBestGame(snapshot.val())\n                });\n\n\n                // watch leaderboard\n                watchBestGame = firebase.database().ref('games').orderByChild('spentTime').limitToFirst(10) \n                watchBestGame.on('value', function(snapshot) {\n\n                    let sortLeaderBoard = []\n                    snapshot.forEach( child => {\n                        sortLeaderBoard.push(child.val());\n                    } )\n\n                    CState.setLeaderboard(sortLeaderBoard);\n                    \n                });\n\n\n                // watch user General Info\n                watchGeneralInfo = firebase.database().ref( 'users/' + user.uid + '/generalInfo' )\n                watchGeneralInfo.on( 'value', function(snapshot) {\n                    CState.setGeneralInfo( snapshot.val() )\n                })\n                \n            } else {\n                watchUserBestGame && watchUserBestGame.off()\n                watchBestGame && watchBestGame.off()\n                watchGeneralInfo && watchGeneralInfo.off()\n                CState.setUserData('', '', '')\n            }\n        })\n    }, [])\n\n    return (\n        <SnackbarProvider maxSnack={3}>\n            <Page />\n            <Backdrop />\n        </SnackbarProvider>\n    );\n}\n\nconst mapStateToProps = store => ({\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    CState: {\n        setUserData: (name, token, uid) => dispatch( ACTIONS.setUserData(name, token, uid) ),\n        setBestGame: bestGame => dispatch( ACTIONS.setBestGame(bestGame) ),\n        setLeaderboard: leader => dispatch( ACTIONS.setLeaderboard(leader) ),\n        setGeneralInfo: info => dispatch( ACTIONS.setGeneralInfo(info) )\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as CONSTANTS from '../../../constants'\n\nconst data = ( state = {}, action ) => {\n    switch (action.type) {\n        case CONSTANTS.SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default data","import * as CONSTANTS from '../../../../constants'\n\nconst bestGame = ( state = {}, action ) => {\n    switch (action.type) {\n        case CONSTANTS.SET_BEST_GAME:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default bestGame","import * as CONSTANTS from '../../../../constants'\n\nconst currentGame = ( state = {}, action ) => {\n    switch (action.type) {\n        case CONSTANTS.SET_START_GAME:\n            return {\n                ...state,\n                ...action.payload\n            }\n        case CONSTANTS.SET_END_GAME:\n            return {\n                ...state,\n                ...action.payload\n            }\n        case CONSTANTS.SET_COUNT_OF_STEPS:\n            return {\n                ...state,\n                ...action.payload\n            }\n\n        case CONSTANTS.SET_ISWIN:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default currentGame","import * as CONSTANTS from '../../../../constants'\n\nconst generalInfo = ( state = {}, action ) => {\n    switch (action.type) {\n        case CONSTANTS.SET_GENERAL_INFO:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default generalInfo","import { combineReducers } from 'redux'\n\nimport bestGame from './BestGame/'\nimport currentGame from './CurrentGame/'\nimport generalInfo from './GeneralInfo/'\n\n\nexport default combineReducers( {\n    bestGame,\n    currentGame,\n    generalInfo\n} )","import * as CONSTANTS from '../../../constants'\n\nconst validation = ( state = {}, action ) => {\n    switch (action.type) {\n        case CONSTANTS.SET_USER_VALIDATION:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default validation","import { combineReducers } from 'redux'\n\nimport data from './Data/'\nimport stat from './Stat/'\nimport validation from './Validation/'\n\n\nexport default combineReducers({\n    data,\n    stat,\n    validation\n})","import * as CONSTANTS from '../../constants'\n\nconst GameReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSTANTS.SET_LEADER_BOARD:\n\n            return action.payload\n            \n        default:\n            return state\n    }\n}\n\nexport default GameReducer","import * as CONTANST from '../../constants'\n\nconst notifications = (state = [], action) => {\n    switch (action.type) {\n        case CONTANST.ENQUEUE_SNACKBAR:\n            return [\n                ...state,\n                {\n                    key: action.key,\n                    ...action.notification,\n                },    \n            ]\n        case CONTANST.CLOSE_SNACKBAR:\n            return state.map(notification => (\n                    (action.dismissAll || notification.key === action.key)\n                        ? { ...notification, dismissed: true }\n                        : { ...notification }\n                ))\n            \n\n        case CONTANST.REMOVE_SNACKBAR:\n            return state.filter(\n                    notification => notification.key !== action.key,\n                )\n            \n        default:\n            return state;\n    }\n};\n\n\nexport default notifications","import * as CONSTANTS from '../../../constants'\n\nconst BackdropReducer = (state = false, action) => {\n    switch (action.type) {\n        case CONSTANTS.SET_BACKDROP:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport default BackdropReducer","import * as CONSTANTS from '../../../constants'\n\nconst SkeletonReducer = (state = false, action) => {\n    switch (action.type) {\n        case CONSTANTS.SET_SKELETON:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport default SkeletonReducer","import { combineReducers } from 'redux'\n\nimport backdrop from './Backdrop/'\nimport skeleton from './Skeleton/'\n\n\nexport default combineReducers({\n    backdrop,\n    skeleton\n})","const initialState = {\n    user: {\n        data: {\n            name: '',\n            token: '',\n            uid: '',\n        },\n        stat: {\n            generalInfo: {\n                countOfGames: 0,\n                countOfSteps: 0,\n                spentTime: 0,\n            },\n            bestGame: {\n                date: 0,\n                spentTime: 0,\n                countOfSteps: 0,\n            },\n            currentGame: {\n                startTime: 0,\n                endTime: 0,\n                isWin: false,\n                countOfSteps: 0,\n            }\n        },\n        validation: {\n            email: {\n                error: false,\n                text: ''\n            },\n            name: {\n                error: false,\n                text: ''\n            },\n            password: {\n                error: false,\n                text: ''\n            },\n        }\n    },\n    loading: {\n        backdrop: false,\n        skeleton: true,\n    },\n    leaderboard: [],\n    notifications: [],\n}\n\nexport default initialState","import { combineReducers } from 'redux'\n\nimport user from './User/'\nimport leaderboard from './Leaderboard/'\nimport notifications from './Notification/'\nimport loading from './Loading/'\nimport initialState from '../initialState'\nimport * as CONSTANTS from '../constants'\n\nconst appReducer = combineReducers({\n  user,\n  leaderboard,\n  notifications,\n  loading\n})\n\nconst rootReducer = (state = {...initialState}, action) => {\n    if (action.type === CONSTANTS.USER_SIGN_OUT) {\n        state = {...initialState}\n    }\n\n    return appReducer(state, action)\n}\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport { createStore, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\nimport rootReducer from './redux/reducers'\n\n\nconst middleware = applyMiddleware(\n    thunk\n);\n\nconst composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(middleware),\n)\n\nReactDOM.render(\n  <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}